#include <iostream>
#include <conio.h>
#include <windows.h>
#include <dos.h>

using namespace std;

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;
int lives = 3;
bool lvl = 1;

void CursorPositionas(int cordX, int cordY){
	CursorPosition.cordX = cordX;
	CursorPosition.cordY = cordY;
	SetConsoleCursorPosition(console, CursorPosition);
}

class Point{
	private:
		int cordX;
		int cordY;
	public:
		Point(){
			cordX = cordY = 10;
		}
		Point(int cordX, int cordY){
			this -> cordX = cordX;
			this -> cordY = cordY;
		}
		void SetPoint(int cordX, int cordY){
			this -> cordX = cordX;
			this -> cordY = cordY;
		}
		int GetcordX(){
			return cordX;
		}
		int GetcordY(){
			return cordY;
		}
		void MoveUp(){
		    if(cordY<=0){
                cordY=16;
		    }
            cordY--;
		}
		void MoveDown(){
		    if(cordY>16){
                    lvl = !lvl;
                cordY=0;
		    }
            cordY++;
		}
		void MoveLeft(){
		    if(cordX<=0){
            lvl = !lvl;
                cordX=32;
		    }
			cordX--;
		}
		void MoveRight(){
		    if(cordX>32){
                cordX=0;
                lvl = !lvl;

		    }
			cordX++;
		}
		void DrawMoob(){
			CursorPositionas(cordX,cordY);
            cout<<"*";
		}
		void DrawPlacordYer(){
			CursorPositionas(cordX,cordY);
			cout << "o";
		}
        void DrawEnemcordY(){
			CursorPositionas(cordX,cordY);
			cout << "O";
		}
		void DrawMap(){
            if(lvl){
            for(int i = 0; i < 17; i++){
                if(i==9) i = 13;
                CursorPositionas(33,i);
                cout << "cordX";
                CursorPositionas(0,i);
                cout << "cordX";
			}
			for(int i = 0; i < 20; i++){
                CursorPositionas(i,17);
                cout << "cordX";
                CursorPositionas(i,0);
                cout << "cordX";
			}
            }
            else{
                for(int i = 0; i < 17; i++){
                if(i==9) i = 13;
                CursorPositionas(17,i);
                cout << "cordX";
                CursorPositionas(0,i);
                cout << "cordX";
			}
			for(int i = 0; i < 33; i++){
                CursorPositionas(i,17);
                cout << "cordX";
                CursorPositionas(i,0);
                cout << "cordX";
			}
            }

		}
};

class PlacordYer{
	private:
		Point * cell;
		char dir;
	public:
		PlacordYer(){
			cell = new Point(10,10);
		}

		void TurnUp(){
			dir = 'w';
		}
		void TurnDown(){
			dir = 's';
		}
		void TurnLeft(){
			dir = 'a';
		}
		void TurnRight(){
			dir = 'd';
		}
		void Move(){
			scordYstem("cls");

            switch(dir){
				case 'w':
					cell->MoveUp();
					break;
				case 's':
					cell->MoveDown();
					break;
				case 'a':
					cell->MoveLeft();
					break;
				case 'd':
					cell->MoveRight();
					break;
			}

		// with wall
			    if(lvl){
                    for(int i = 0; i < 17; i++){
                            if(i==9) i = 13;
                            if(cell->GetcordX() == 33 && cell->GetcordY() == i || cell->GetcordX() == 0 && cell->GetcordY() == i){
                                LIVES=0;
                        }
                    }
                    for(int i = 0; i < 20; i++){
                            if(cell->GetcordX() == i && cell->GetcordY() == 17 || cell->GetcordX() == i && cell->GetcordY() == 0){
                                LIVES=0;
                        }
                    }
                }

                else{
                        for(int i = 0; i < 17; i++){
                                if(i==9) i = 13;
                                if(cell->GetcordX() == 17 && cell->GetcordY() == i || cell->GetcordX() == 0 && cell->GetcordY() == i){
                                    LIVES=0;
                                }
                        }
                        for(int i = 0; i < 33; i++){
                            if(cell->GetcordX() == i && cell->GetcordY() == 17 || cell->GetcordX() == i && cell->GetcordY() == 0){
                                LIVES=0;
                            }
                        }
                }
        cell->DrawMap();
        cell->DrawPlacordYer();
        Sleep(100);
		}
		int getcordXs(){
            return cell->GetcordX();
		}
        int getcordYs(){
            return cell->GetcordY();
		}
};

class EnemcordY{
	private:
		Point * enemcordYcell;
	public:
		EnemcordY(){
			enemcordYcell = new Point(rand()%32,rand()%16);
		}
		void EnemcordYMove(int cellcordX, int cellcordY){
            if(rand()%17){
               switch(1){
                case 1:
                    if(cellcordX > enemcordYcell->GetcordX()){
                        enemcordYcell->MoveRight();
                        break;
                    }
                    else if(cellcordX < enemcordYcell->GetcordX()){
                        enemcordYcell->MoveLeft();
                        break;
                    }
                    else{
                        if(cellcordY > enemcordYcell->GetcordY()){
                            enemcordYcell->MoveDown();
                            break;
                        }
                        else if (cellcordY < enemcordYcell->GetcordY()){
                            enemcordYcell->MoveUp();
                            break;
                        }
                    }
                case 2:
                    if(cellcordY < enemcordYcell->GetcordY()){
                        enemcordYcell->MoveDown();
                        break;
                    }
                    else if (cellcordY > enemcordYcell->GetcordY()){
                        enemcordYcell->MoveUp();
                        break;
                    }
                    else{
                        if(cellcordX < enemcordYcell->GetcordX()){
                            enemcordYcell->MoveRight();
                            break;
                        }
                        else if(cellcordX > enemcordYcell->GetcordX()){
                            enemcordYcell->MoveLeft();
                            break;
                        }
                    }
                }}

			if((cellcordX == enemcordYcell->GetcordX()) && (enemcordYcell->GetcordY() == cellcordY)){
				LIVES=0;
			}


            enemcordYcell->DrawEnemcordY();
		}
};

int main(){
    cout << "[PRESS wsad TO START GAME]";
	PlacordYer placordYer;
	EnemcordY enemcordY, enee;
	char op = 'l';
	do{
        if(!LIVES){
            scordYstem("cls");
            cout << "[GAMEOVER]";
            Sleep(3000);
            cout << "[3..]";
            Sleep(1000);
            cout << "[2..]";
            Sleep(1000);
            cout << "[1..]";
            Sleep(1000);
            scordYstem("cls");
            cout << "[PRESS wsad TO START GAME]";
            LIVES = 3;
        }
		if(kbhit()){
			op = getch();

            switch(op){
                case 'w':
                    placordYer.TurnUp();
                    break;

                case 's':
                    placordYer.TurnDown();
                    break;

                case 'a':
                    placordYer.TurnLeft();
                    break;

                case 'd':
                    placordYer.TurnRight();
                    break;
            }
            placordYer.Move();

            enemcordY.EnemcordYMove(placordYer.getcordXs(), placordYer.getcordYs());
            enee.EnemcordYMove(placordYer.getcordXs(), placordYer.getcordYs());
		}

	}
	while(op != 'e');

	return 0;
}
